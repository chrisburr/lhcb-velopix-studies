# [SublimeLinter flake8-max-line-length:120]
from glob import glob
from os.path import dirname, join, isfile
import re

wildcard_constraints:
    scenario="(tip|Nominal).*",
    job_id="\d+"


def make_input(s):
    matches = [
        re.match('output/scenarios/(.+)/hists/(\d+)/Brunel.xdst', fn).groups()
        for fn in glob(f'output/scenarios/Original_DB/hists/*/Brunel.xdst')
    ]
    for scenario, job_id in matches:
        yield f'output/scenarios/{scenario}/{s}_{job_id}.msg'


rule make_original_msgpacks:
    input:
        clusters_fn=make_input('clusters'),
        tracks_fn=make_input('tracks'),
        particles_fn=make_input('particles'),
        residuals_fn=make_input('residuals'),


rule make_original_msgpacks_work:
    input:
        xdst_fn='output/scenarios/Original_DB/hists/{job_id}/Brunel.xdst',
    output:
        clusters_fn='output/scenarios/Original_DB/clusters_{job_id}.msg',
        tracks_fn='output/scenarios/Original_DB/tracks_{job_id}.msg',
        particles_fn='output/scenarios/Original_DB/particles_{job_id}.msg',
        residuals_fn='output/scenarios/Original_DB/residuals_{job_id}.msg',
    shell:
        'set +u && '
        'source activate python2.7 && '
        'source /cvmfs/lhcb.cern.ch/group_login.sh && '
        'lb-run Panoramix/latest python read_xdst.py "Original_DB" --job-id {wildcards.job_id} --n-events 2000 &&'
        'set -u'


def get_valid_original_ids():
    return list(zip(*[
        re.match('output/scenarios/(.+)/hists/(\d+)/Brunel.xdst', fn).groups()
        for fn in glob('output/scenarios/Original_DB/hists/*/Brunel.xdst')
    ]))[1]


def make_input(s):
    job_ids = get_valid_original_ids()
    matches = [
        re.match('output/scenarios/(.+)/hists/(\d+)/Brunel.xdst', fn).groups()
        for fn in glob('output/scenarios/*/hists/*/Brunel.xdst')
    ]
    for scenario, job_id in matches:
        if job_id in job_ids:
            yield f'output/scenarios/{scenario}/{s}_{job_id}.msg'


rule make_msgpacks:
    input:
        clusters_fn=make_input('clusters'),
        tracks_fn=make_input('tracks'),
        particles_fn=make_input('particles'),
        residuals_fn=make_input('residuals'),


rule make_msgpacks_work:
    input:
        xdst_fn='output/scenarios/{scenario}/hists/{job_id}/Brunel.xdst',
        original_clusters_fn='output/scenarios/Original_DB/clusters_{job_id}.msg',
    output:
        clusters_fn='output/scenarios/{scenario}/clusters_{job_id}.msg',
        tracks_fn='output/scenarios/{scenario}/tracks_{job_id}.msg',
        particles_fn='output/scenarios/{scenario}/particles_{job_id}.msg',
        residuals_fn='output/scenarios/{scenario}/residuals_{job_id}.msg',
    shell:
        'set +u && '
        'source activate python2.7 && '
        'source /cvmfs/lhcb.cern.ch/group_login.sh && '
        'lb-run Panoramix/latest python read_xdst.py "{wildcards.scenario}" --job-id {wildcards.job_id} --n-events 2000 &&'
        'set -u'


def make_input(filename):
    matches = [
        re.match('output/scenarios/(.+)/Alignment_SIMCOND.db', fn).groups()
        for fn in glob('output/scenarios/*/Alignment_SIMCOND.db')
    ]
    for scenario, in matches:
        yield f'output/scenarios/{scenario}/{filename}'


rule check_geometry:
    input:
        local_geo_fn=make_input('local_geo.json'),
        global_geo_fn=make_input('global_geo.json'),


rule check_geometry_work:
    input:
        simcond_layer_fn='output/scenarios/{scenario}/Alignment_SIMCOND.db'
    output:
        local_geo_fn='output/scenarios/{scenario}/local_geo.json',
        global_geo_fn='output/scenarios/{scenario}/global_geo.json',
    shell:
        'set +u && '
        'source activate python2.7 && '
        'source /cvmfs/lhcb.cern.ch/group_login.sh && '
        'lb-run Brunel/v51r1 python make_velo_geometry_json.py "{wildcards.scenario}" &&'
        'set -u'


def make_input():
    matches = [
        re.match('output/scenarios/tip_x=0um_y=\+(.*)/Alignment_SIMCOND.db', fn).groups()
        for fn in glob('output/scenarios/tip_x=0um_y=+*/Alignment_SIMCOND.db')
    ]
    for distortion, in matches:
        yield f'output/tip_x=0um_y=-{distortion}_Nominal_tip_x=0um_y=+{distortion}/Module Positions.ipynb'


rule make_geometry_plots:
    input:
        make_input()


rule make_geometry_plots_work:
    input:
        nb_fn='notebooks/Module Positions.ipynb',
        nominal_geo='output/scenarios/Nominal/global_geo.json',
        plus_geo='output/scenarios/tip_x=0um_y=+{distortion}/global_geo.json',
        minus_geo='output/scenarios/tip_x=0um_y=-{distortion}/global_geo.json'
    output:
        nb_fn='output/tip_x=0um_y=-{distortion}_Nominal_tip_x=0um_y=+{distortion}/Module Positions.ipynb'
    shell:
        'sed \'s#scenarios = \[.*\]#'
        'scenarios = [\\\\"tip_x=0um_y=-{wildcards.distortion}\\\\", \\\\"Nominal\\\\", \\\\"tip_x=0um_y=+{wildcards.distortion}\\\\"]#\' '
        '"{input.nb_fn}" > "{output.nb_fn}" && '
        'chdir notebooks && '
        'runipy --no-chdir -o "../{output.nb_fn}"'


def make_input():
    matches = [
        re.match('output/scenarios/tip_x=0um_y=\+(.*)/Alignment_SIMCOND.db', fn).groups()
        for fn in glob('output/scenarios/tip_x=0um_y=+*/Alignment_SIMCOND.db')
    ]
    for distortion, in matches:
        if (
            glob(f'output/scenarios/tip_x=0um_y=-{distortion}/clusters_*.msg') and
            glob(f'output/scenarios/tip_x=0um_y=+{distortion}/clusters_*.msg')
        ):
            yield f'output/tip_x=0um_y=-{distortion}_Nominal_tip_x=0um_y=+{distortion}/Further studies.ipynb'


rule make_further_studies:
    input:
        make_input()


def make_input(scenario):
    for data_type in ['clusters', 'tracks', 'particles', 'residuals']:
        yield f'output/scenarios/{scenario}/{data_type}_0.msg'


rule make_further_studies_work:
    input:
        nb_fn='notebooks/Further studies.ipynb',
        nominal_data=make_input('Nominal'),
        plus_data=make_input('tip_x=0um_y=+{distortion}'),
        minus_data=make_input('tip_x=0um_y=-{distortion}'),
    output:
        nb_fn='output/tip_x=0um_y=-{distortion}_Nominal_tip_x=0um_y=+{distortion}/Further studies.ipynb'
    shell:
        'sed \'s#scenarios = \[.*\]#'
        'scenarios = [\\\\"tip_x=0um_y=-{wildcards.distortion}\\\\", \\\\"Nominal\\\\", \\\\"tip_x=0um_y=+{wildcards.distortion}\\\\"]#\' '
        '"{input.nb_fn}" > '
        '"{output.nb_fn}" && '
        'cd notebooks && '
        'runipy --no-chdir -o "../{output.nb_fn}"'


rule all:
    input:
        rules.check_geometry.input,
        rules.make_geometry_plots.input,
        rules.make_msgpacks.input,
        rules.make_further_studies.input,
